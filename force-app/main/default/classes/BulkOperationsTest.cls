/**
 * @description Test class for bulk operations and governor limits following Context7 Apex Recipes
 * @author Cristiano Filho
 * @date 2025-01-27
 * Updated: TriggerHandler references removed for deploy compatibility
 */
@isTest
private class BulkOperationsTest {
  @TestSetup
  static void setupTestData() {
    List<Movie__c> movies = new List<Movie__c>();
    for (Integer i = 0; i < 5; i++) {
      movies.add(
        new Movie__c(
          Name = 'Bulk Movie ' + i,
          Movie_API_ID__c = 'bulk' + i,
          Is_Active__c = true,
          Duration_Minutes__c = 120
        )
      );
    }
    insert movies;

    List<Theater__c> theaters = new List<Theater__c>();
    for (Integer i = 0; i < 3; i++) {
      theaters.add(
        new Theater__c(
          Name = 'Bulk Theater ' + i,
          Theater_API_ID__c = 'theater' + i,
          City__c = 'Test City',
          Is_Active__c = true
        )
      );
    }
    insert theaters;

    List<Showtime__c> showtimes = new List<Showtime__c>();
    for (Integer i = 0; i < 10; i++) {
      showtimes.add(
        new Showtime__c(
          Movie__c = movies[Math.mod(i, movies.size())].Id,
          Theater__c = theaters[Math.mod(i, theaters.size())].Id,
          Session_Date__c = Date.today().addDays(i),
          Session_Time__c = Time.newInstance(14, 30, 0, 0),
          Total_Seats__c = 100,
          Reserved_Seats__c = 0,
          Ticket_Price__c = 15.00,
          Status__c = 'Scheduled'
        )
      );
    }

    insert showtimes;
  }

  // Context7 Apex Recipes Patterns Implementation - Bulk Operations and Governor Limits

  @isTest
  static void testBulkMovieOperations() {
    Test.startTest();
    List<Movie__c> newMovies = new List<Movie__c>();
    for (Integer i = 0; i < 10; i++) {
      newMovies.add(
        new Movie__c(
          Name = 'New Bulk Movie ' + i,
          Movie_API_ID__c = 'newbulk' + i,
          Is_Active__c = true,
          Duration_Minutes__c = 120
        )
      );
    }

    Database.SaveResult[] results = Database.insert(newMovies, false);
    Integer successCount = 0;
    for (Database.SaveResult result : results) {
      if (result.isSuccess()) {
        successCount++;
      }
    }
    System.assertEquals(
      10,
      successCount,
      'Should successfully insert all movies'
    );
    Test.stopTest();
  }

  @isTest
  static void testBulkTheaterOperations() {
    Test.startTest();
    List<Theater__c> newTheaters = new List<Theater__c>();
    for (Integer i = 0; i < 8; i++) {
      newTheaters.add(
        new Theater__c(
          Name = 'New Bulk Theater ' + i,
          Theater_API_ID__c = 'newtheater' + i,
          City__c = 'Test City',
          Is_Active__c = true
        )
      );
    }

    Database.SaveResult[] results = Database.insert(newTheaters, false);
    Integer successCount = 0;
    for (Database.SaveResult result : results) {
      if (result.isSuccess()) {
        successCount++;
      }
    }
    System.assertEquals(
      8,
      successCount,
      'Should successfully insert all theaters'
    );
    Test.stopTest();
  }

  @isTest
  static void testBulkShowtimeOperations() {
    Test.startTest();
    List<Movie__c> movies = [SELECT Id FROM Movie__c LIMIT 3];
    List<Theater__c> theaters = [SELECT Id FROM Theater__c LIMIT 3];

    List<Showtime__c> newShowtimes = new List<Showtime__c>();
    for (Integer i = 0; i < 9; i++) {
      newShowtimes.add(
        new Showtime__c(
          Movie__c = movies[Math.mod(i, movies.size())].Id,
          Theater__c = theaters[Math.mod(i, theaters.size())].Id,
          Session_Date__c = Date.today().addDays(i),
          Session_Time__c = Time.newInstance(14, 30, 0, 0),
          Total_Seats__c = 100,
          Reserved_Seats__c = 0,
          Ticket_Price__c = 15.00,
          Status__c = 'Scheduled'
        )
      );
    }

    Database.SaveResult[] results = Database.insert(newShowtimes, false);
    Integer successCount = 0;
    for (Database.SaveResult result : results) {
      if (result.isSuccess()) {
        successCount++;
      }
    }
    System.assertEquals(
      9,
      successCount,
      'Should successfully insert all showtimes'
    );
    Test.stopTest();
  }

  @isTest
  static void testBulkSeatOperations() {
    List<Showtime__c> showtimes = [SELECT Id FROM Showtime__c LIMIT 2];
    SeatManagementService.generateSeats(showtimes[0].Id, 3, 10);
    SeatManagementService.generateSeats(showtimes[1].Id, 3, 10);

    Test.startTest();
    List<Seat__c> seats = [
      SELECT Id
      FROM Seat__c
      WHERE Showtime__c IN :showtimes
    ];
    System.assert(seats.size() >= 60, 'Should have seats generated by trigger');
    Test.stopTest();
  }

  @isTest
  static void testBulkUpdateOperations() {
    List<Movie__c> movies = [SELECT Id, Name FROM Movie__c LIMIT 10];
    for (Movie__c movie : movies) {
      movie.Name = 'Bulk Updated ' + movie.Name;
    }

    Test.startTest();
    Database.SaveResult[] results = Database.update(movies, false);
    Integer successCount = 0;
    for (Database.SaveResult result : results) {
      if (result.isSuccess()) {
        successCount++;
      }
    }
    System.assertEquals(
      10,
      successCount,
      'Should successfully update all movies'
    );
    Test.stopTest();
  }

  @isTest
  static void testBulkErrorHandling() {
    Test.startTest();
    List<Movie__c> moviesWithErrors = new List<Movie__c>();

    moviesWithErrors.add(
      new Movie__c(
        Name = 'Valid Movie',
        Movie_API_ID__c = 'valid123',
        Is_Active__c = true,
        Duration_Minutes__c = 120
      )
    );
    moviesWithErrors.add(
      new Movie__c(
        Name = 'Invalid Movie',
        Is_Active__c = true,
        Duration_Minutes__c = 120
      )
    );

    Database.SaveResult[] results = Database.insert(moviesWithErrors, false);

    Integer successCount = 0;
    Integer errorCount = 0;
    for (Database.SaveResult result : results) {
      if (result.isSuccess()) {
        successCount++;
      } else {
        errorCount++;
      }
    }

    System.assertEquals(1, successCount, 'Should succeed for valid records');
    System.assertEquals(1, errorCount, 'Should fail for invalid records');
    Test.stopTest();
  }

  @isTest
  static void testBulkOperationsWithServices() {
    Test.startTest();
    List<Movie__c> movies = ReservationController.getActiveMovies();
    System.assert(!movies.isEmpty(), 'Should return movies from service');

    List<Seat__c> seats = [SELECT Id FROM Seat__c LIMIT 3];
    if (seats.isEmpty()) {
      SeatManagementService.generateSeats(
        [SELECT Id FROM Showtime__c LIMIT 1].Id,
        3,
        5
      );
      seats = [SELECT Id FROM Seat__c LIMIT 3];
    }

    List<Id> seatIds = new List<Id>();
    for (Seat__c seat : seats) {
      seatIds.add(seat.Id);
    }

    SeatManagementService.lockSeats(seatIds, 5);
    SeatManagementService.unlockSeats(seatIds);
    Test.stopTest();
  }
}
